Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Solution:

class TrieNode{
  public:
    bool isEOW;
    TrieNode* children[26];
    
    TrieNode(){
        this->isEOW=false;
        for(int i=0;i<26;i++){
            this->children[i]=nullptr;
        }
    }
};

class Trie {
private:
    TrieNode* root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* current=root;
        for(char ch: word){
            int index=ch-'a';
            if(current->children[index]==nullptr){
                current->children[index]=new TrieNode();
            }
            current=current->children[index];
        }
        current->isEOW=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* current=root;
        for(char ch: word){
            int index=ch-'a';
            if(current->children[index]==nullptr){
                return false;
            }
            current=current->children[index];
        }
        
        return current->isEOW;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* current=root;
        for(char ch: prefix){
            int index=ch-'a';
            current=current->children[index];
            if(current==nullptr){
                return false;
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */