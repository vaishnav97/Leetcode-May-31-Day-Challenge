Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.
 

Example 1:

Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
 

Example 2:

Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


Solution:

typedef long int ll;

class Solution {
private:
    ll fastPow(ll a,ll b){
        ll ans=1;    
        
        while(b){
            if(b&1) ans=ans*a;            
            a=a*a;
            b>>=1;
        }    
        
        return ans;
    }
    
public:
    int findComplement(int num) {
        if(num==0) return 1;
        if(num==1) return 0;
        
        ll temp=num;
        ll bits=0;
        
        while(temp!=0){
            temp>>=1;
            bits++;
        }
        
        return ((fastPow((ll)2,bits)-1)^num);
    }
};