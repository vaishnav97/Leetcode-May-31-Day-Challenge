In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.
Return true if and only if the nodes corresponding to the values x and y are cousins.

Example 1:

Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:

Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:

Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false


Solution:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*> q;
        
        unordered_map<int,int> parent;
        unordered_map<int,int> level;
        
        q.push(root);        
        int l=-1;
        
        while(!q.empty()){
            int n=q.size();
            l++;
            
            for(int i=0;i<n;i++){
                TreeNode* qfront=q.front();
                q.pop();
                
                level[qfront->val]=l;
                
                if(qfront->left){
                    parent[qfront->left->val]=qfront->val;
                    q.push(qfront->left);
                }
                
                if(qfront->right){
                    parent[qfront->right->val]=qfront->val;
                    q.push(qfront->right);
                }               
            }
        }
        
        if(level[x]!=level[y]) return false;
        if(parent[x]==parent[y]) return false;
        return true;        
    }
};