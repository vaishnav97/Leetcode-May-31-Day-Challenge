Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

 

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]


Solution:

class Solution {
private:
    void constructTree(TreeNode* root,int num){
        if(num < root->val){
            if(root->left==NULL) root->left=new TreeNode(num);
            else constructTree(root->left,num);
        }else{
            if(root->right==NULL) root->right=new TreeNode(num);
            else constructTree(root->right,num);
        }
    }
    
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        if(preorder.size()==0) return NULL;
        
        TreeNode* root=new TreeNode(preorder[0]);
        
        for(int i=1;i<preorder.size();i++){
            constructTree(root,preorder[i]);
        }
        
        return root;       
    }
};