Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


Solution:

class Solution {
private:
    bool checkZero(vector<int> freq){
        for(int i=0;i<26;i++){
            if(freq[i]!=0) return false;
        }
        return true;
    }
    
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> ans;
        
        int len1=s.length();
        int len2=p.length();
        
        if(len1 < len2) return ans;
        
        vector<int> freq(26,0);
        
        for(int i=0;i<len2;i++) freq[p[i]-'a']++;
        for(int i=0;i<len2;i++) freq[s[i]-'a']--;
        
        if(checkZero(freq)){
            ans.push_back(0);
        }
        
        for(int i=len2;i<len1;i++){
            freq[s[i]-'a']--;
            freq[s[i-len2]-'a']++;
            if(checkZero(freq)){
                ans.push_back(i-len2+1);
            }
        }
        
        return ans;
    }
};