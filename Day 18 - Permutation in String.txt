Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.


Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False


Solution:

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        vector<int> v1(26,0),v2(26,0);
        
        if(s1.length() > s2.length()) return false;
        
        for(int i=0;i<s1.length();i++){
            v1[s1[i]-'a']++;
            v2[s2[i]-'a']++;
        }
        
        if(v1 == v2) return true;
        
        for(int i=s1.length();i<s2.length();i++){
            v2[s2[i]-'a']++;
            v2[s2[i-s1.length()]-'a']--;
            if(v1 == v2) return true;
        }
        
        return false;
    }
};