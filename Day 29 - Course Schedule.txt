There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses? 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take.To take course 1 you should have finished course 0. So it is possible.

Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take.To take course 1 you should have finished course 0, and to take course 0 you should
also have finished course 1. So it is impossible.


Solution:

class Solution {
private:
    bool hasNoCycle(vector<vector<int>>& courses,vector<bool>& visited,int src){
        visited[src]=true;
        
        for(auto neighbour: courses[src]){
            if(visited[neighbour]==true || (visited[neighbour]==false && !hasNoCycle(courses,visited,neighbour))){
                return false;
            }
        }
        
        visited[src]=false;
        return true;
    }
    
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        if(prerequisites.size()==0) return true;
        
        vector<vector<int>> courses(numCourses);
        for(int i=0;i<prerequisites.size();i++){
            courses[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        
        vector<bool> visited(numCourses,false);
        
        for(int i=0;i<numCourses;i++){
            if(!hasNoCycle(courses,visited,i)){
                return false;
            }
        }
        
        return true;
    }
};